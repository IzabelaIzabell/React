{"ast":null,"code":"import _classCallCheck from \"/Users/mini/Documents/projektKoncowy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mini/Documents/projektKoncowy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mini/Documents/projektKoncowy/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mini/Documents/projektKoncowy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mini/Documents/projektKoncowy/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mini/Documents/projektKoncowy/src/game.js\";\nimport React from 'react';\nimport './gameBoard.css';\n\nvar Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Game)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.randomBatman = function (urows, ucolumns) {\n      var calcBoard = urows * ucolumns;\n      console.log(calcBoard);\n\n      for (var i = 0; i < calcBoard; i++) {\n        var randomNr = Math.round(Math.random() * (calcBoard - 1) + 1);\n        console.log(randomNr);\n      }\n    };\n\n    _this.boardGame = function (urows, ucolumns) {\n      // Build the rows in an array\n      var rows = [];\n\n      for (var y = 0; y < urows; y++) {\n        var cells = [];\n\n        for (var x = 0; x < ucolumns; x++) {\n          cells.push(React.createElement(Cell, {\n            key: x,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 23\n            },\n            __self: this\n          }));\n        } // Put them in the row\n\n\n        rows.push(React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }, cells));\n      } // Return the table\n\n\n      return React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, rows));\n    };\n\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      var userRows = prompt(\"Provide number of rows\");\n      var userColumns = prompt(\"Provide number of columns\");\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, this.boardGame(userRows, userColumns), React.createElement(\"button\", {\n        onClick: this.randomBatman(userRows, userColumns),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Start\"));\n    }\n  }]);\n\n  return Game;\n}(React.Component);\n\nvar Cell =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Cell, _React$Component2);\n\n  function Cell() {\n    _classCallCheck(this, Cell);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Cell).apply(this, arguments));\n  }\n\n  _createClass(Cell, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: require(\"./imagies/joker-white.jpg\"),\n        className: \"cell\",\n        alt: \"x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Cell;\n}(React.Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/mini/Documents/projektKoncowy/src/game.js"],"names":["React","Game","randomBatman","urows","ucolumns","calcBoard","console","log","i","randomNr","Math","round","random","boardGame","rows","y","cells","x","push","userRows","prompt","userColumns","Component","Cell","require"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;;IAGMC,I;;;;;;;;;;;;;;;;;;UAEFC,Y,GAAe,UAACC,KAAD,EAAOC,QAAP,EAAmB;AAC9B,UAAIC,SAAS,GAAGF,KAAK,GAAGC,QAAxB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;;AACA,WAAM,IAAIG,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAEH,SAApB,EAA+BG,CAAC,EAAhC,EAAmC;AAC/B,YAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,SAAS,GAAG,CAA7B,IAAkC,CAA7C,CAAf;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AACH;AAEJ,K;;UAEDI,S,GAAY,UAACV,KAAD,EAAQC,QAAR,EAAqB;AAC7B;AACA,UAAIU,IAAI,GAAG,EAAX;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,KAApB,EAA2BY,CAAC,EAA5B,EAAgC;AAC5B,YAAMC,KAAK,GAAG,EAAd;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,QAApB,EAA8Ba,CAAC,EAA/B,EAAmC;AAC/BD,UAAAA,KAAK,CAACE,IAAN,CAAW,oBAAC,IAAD;AAAO,YAAA,GAAG,EAAED,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAX;AACH,SAJ2B,CAK5B;;;AACAH,QAAAA,IAAI,CAACI,IAAL,CAAU;AAAI,UAAA,GAAG,EAAEH,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAaC,KAAb,CAAV;AACH,OAV4B,CAY7B;;;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGF,IADH,CADF,CADF;AAOH,K;;;;;;;6BAEQ;AACL,UAAIK,QAAQ,GAAGC,MAAM,CAAC,wBAAD,CAArB;AACA,UAAIC,WAAW,GAAGD,MAAM,CAAC,2BAAD,CAAxB;AAEA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKP,SAAL,CAAeM,QAAf,EAAwBE,WAAxB,CADH,EAEE;AAAQ,QAAA,OAAO,EAAG,KAAKnB,YAAL,CAAkBiB,QAAlB,EAA2BE,WAA3B,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,CADF;AAMH;;;;EA5CcrB,KAAK,CAACsB,S;;IA+CnBC,I;;;;;;;;;;;;;6BAIO;AACL,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,GAAG,EAAEC,OAAO,CAAC,2BAAD,CADd;AAGE,QAAA,SAAS,EAAC,MAHZ;AAIE,QAAA,GAAG,EAAC,GAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AASH;;;;EAdcxB,KAAK,CAACsB,S;;AAmBzB,eAAerB,IAAf","sourcesContent":["import React from 'react';\nimport './gameBoard.css'\n\n\nclass Game extends React.Component {\n\n    randomBatman = (urows,ucolumns) =>{\n        let calcBoard = urows * ucolumns\n        console.log(calcBoard)\n        for ( let i = 0; i <calcBoard; i++){\n            let randomNr = Math.round(Math.random() * (calcBoard - 1) + 1);\n            console.log(randomNr)\n        }\n       \n    }\n    \n    boardGame = (urows, ucolumns) => {\n        // Build the rows in an array\n        let rows = [];\n        for (let y = 0; y < urows; y++) {\n            const cells = [];\n            for (let x = 0; x < ucolumns; x++) {\n                cells.push(<Cell  key={x} />);\n            }\n            // Put them in the row\n            rows.push(<tr key={y}>{cells}</tr>);\n        }\n\n        // Return the table\n        return (\n          <table>\n            <tbody>\n              {rows}\n            </tbody>\n          </table>\n        );\n    }\n\n    render() {\n        let userRows = prompt(\"Provide number of rows\");\n        let userColumns = prompt(\"Provide number of columns\");\n\n        return (\n          <div>\n            {this.boardGame(userRows,userColumns)}\n            <button onClick ={this.randomBatman(userRows,userColumns)}>Start</button>\n          </div>\n        );\n    }\n}\n\nclass Cell extends React.Component {\n\n  \n\n    render() {\n        return (\n          <td>\n            <img\n              src={require(\"./imagies/joker-white.jpg\")}\n              \n              className=\"cell\"\n              alt=\"x\" />\n          </td>\n        );\n    }\n}\n         \n\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}