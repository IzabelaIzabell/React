{"ast":null,"code":"import _classCallCheck from \"/Users/mini/Documents/projektKoncowy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mini/Documents/projektKoncowy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mini/Documents/projektKoncowy/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mini/Documents/projektKoncowy/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mini/Documents/projektKoncowy/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mini/Documents/projektKoncowy/src/game.js\";\n// import React from 'react';\n// import './gameBoard.css'\n// class Game extends React.Component {\n//     constructor(props){\n//         super(props);\n//         this.state={\n//             counter :0\n//         }\n//     }\n//     boardGame = (urows, ucolumns) => {\n//         // Build the rows in an array\n//         let rows = [];\n//         for (let y = 0; y < urows; y++) {\n//             const cells = [];\n//             for (let x = 0; x < ucolumns; x++) {\n//                 cells.push(<Cell key={x}  />);\n//             }\n//             // Put them in the row\n//             rows.push(<tr key={y}>{cells}</tr>);\n//         }\n//       // Return the table\n//         return (\n//           <table>\n//             <tbody>\n//               {rows}\n//             </tbody>\n//           </table>\n//         );\n//     }\n//     render() {\n//         let userRows = prompt(\"Provide number of rows\");\n//         let userColumns = prompt(\"Provide number of columns\");\n//         return (\n//             <div>\n//                 <div>{this.boardGame(userRows,userColumns)}</div>\n//             {/* start generate random index during click on button  */}\n//                 {/* <button onClick ={() => this.check(musze przekazac cala tablice z funkcji boardGame)}>Check next population</button> */}\n//             </div>\n//         );\n//     }\n// }\n// class Cell extends React.Component {\n//     constructor(props){\n//         super(props)\n//             this.state={\n//                 image:\"./imagies/joker-white.jpg\",\n//                 alert:\"start\",\n//                 counter: 0\n//         }\n//     }\n//     // handleClick = ()=>{\n//     //     if(typeof this.props.onClick === \"function\"){\n//     //         this.props.onClick();\n//     //     }\n//     // }\n//     changeForBatmans = () =>{\n//         //need to change img during click \n//         console.log(this.state.image)\n//         if ( this.state.image ===\"./imagies/joker-white.jpg\"){\n//             this.setState({\n//                 image: \"./imagies/batman-black.jpg\"\n//                 // counter: this.state.counter +1\n//             })\n//             // console.log(this.state.counter)\n//         }else {\n//             // this.setState({\n//             //     image: \"./imagies/joker-white.jpg\"\n//             // })\n//             console.log( \"to pole juz bylo klikniete\")\n//         }\n//     }\n//     // }\n//     // componentDidMount(){\n//     //     this.timeoutId = setTimeout(()=>{\n//     //     this.setState({\n//     //         alert:\"start click\"\n//     //     })\n//     //         },5000)\n//     // }\n//     // componentWillUnmount(){\n//     //     clearTimeout(this.timeout);\n//     //     this.setState({\n//     //         alert: `your score is ${this.state.counter} `\n//     //     })\n//     // }\n//     render() {\n//         let final =  <img\n//         src={require(`${this.state.image}`)}\n//         onClick = {() => this.changeForBatmans}\n//         className=\"cell\"\n//         alt=\"x\" />\n//         return (\n//             <td>{final}</td>\n//         );\n//     }\n// }\n// export default Game;\nimport React from 'react';\nimport './gameBoard.css';\n\nvar Game =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Game, _React$Component);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Game).call(this, props));\n\n    _this.boardGame = function (urows, ucolumns) {\n      // Build the rows in an array\n      var rows = [];\n\n      for (var y = 0; y < urows; y++) {\n        var cells = [];\n\n        for (var x = 0; x < ucolumns; x++) {\n          cells.push(React.createElement(Cell, {\n            key: x,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 165\n            },\n            __self: this\n          }));\n        }\n\n        console.log(cells); // Put them in the row\n\n        rows.push(React.createElement(\"tr\", {\n          key: y,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, cells));\n      }\n\n      myMap({\n        rows: rows\n      }); // Return the table\n\n      return React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, rows));\n    };\n\n    _this.myMap = function (boardGame) {\n      boardGame.map(function (board) {\n        console.log(board);\n      });\n    };\n\n    _this.check = function (ar) {};\n\n    _this.state = {\n      counter: 0\n    };\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var userRows = prompt(\"Provide number of rows\");\n      var userColumns = prompt(\"Provide number of columns\");\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, this.boardGame(userRows, userColumns)), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.check();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"Check next population\"));\n    }\n  }]);\n\n  return Game;\n}(React.Component);\n\nvar Cell =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Cell, _React$Component2);\n\n  function Cell(props) {\n    var _this3;\n\n    _classCallCheck(this, Cell);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Cell).call(this, props));\n\n    _this3.changeForBatman = function () {\n      if (_this3.state.image === \"./imagies/joker-white.jpg\") {\n        _this3.setState({\n          image: \"./imagies/batman-black.jpg\",\n          counter: _this3.state.counter + 1\n        });\n      } else {\n        console.log(\"Karta juz zostala odwrocona \");\n      }\n    };\n\n    _this3.state = {\n      image: \"./imagies/joker-white.jpg\",\n      counter: 0\n    };\n    return _this3;\n  }\n\n  _createClass(Cell, [{\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var final = React.createElement(\"img\", {\n        src: require(\"\".concat(this.state.image)),\n        onClick: function onClick() {\n          return _this4.changeForBatman();\n        },\n        className: \"cell\",\n        alt: \"x\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      });\n      var newCounter = this.state.counter;\n      console.log(newCounter);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, final));\n    }\n  }]);\n\n  return Cell;\n}(React.Component);\n\nexport default Game;","map":{"version":3,"sources":["/Users/mini/Documents/projektKoncowy/src/game.js"],"names":["React","Game","props","boardGame","urows","ucolumns","rows","y","cells","x","push","console","log","myMap","map","board","check","ar","state","counter","userRows","prompt","userColumns","Component","Cell","changeForBatman","image","setState","final","require","newCounter"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import './gameBoard.css'\n\n\n\n// class Game extends React.Component {\n//     constructor(props){\n//         super(props);\n//         this.state={\n//             counter :0\n//         }\n//     }\n\n//     boardGame = (urows, ucolumns) => {\n//         // Build the rows in an array\n//         let rows = [];\n//         for (let y = 0; y < urows; y++) {\n//             const cells = [];\n//             for (let x = 0; x < ucolumns; x++) {\n//                 cells.push(<Cell key={x}  />);\n                \n//             }\n    \n//             // Put them in the row\n//             rows.push(<tr key={y}>{cells}</tr>);\n        \n//         }\n//       // Return the table\n//         return (\n//           <table>\n//             <tbody>\n//               {rows}\n//             </tbody>\n//           </table>\n//         );\n//     }\n\n\n\n\n//     render() {\n//         let userRows = prompt(\"Provide number of rows\");\n//         let userColumns = prompt(\"Provide number of columns\");\n\n//         return (\n//             <div>\n//                 <div>{this.boardGame(userRows,userColumns)}</div>\n                \n//             {/* start generate random index during click on button  */}\n//                 {/* <button onClick ={() => this.check(musze przekazac cala tablice z funkcji boardGame)}>Check next population</button> */}\n\n\n               \n       \n//             </div>\n//         );\n//     }\n// }\n\n\n\n// class Cell extends React.Component {\n//     constructor(props){\n//         super(props)\n//             this.state={\n//                 image:\"./imagies/joker-white.jpg\",\n//                 alert:\"start\",\n//                 counter: 0\n\n    \n//         }\n//     }\n//     // handleClick = ()=>{\n//     //     if(typeof this.props.onClick === \"function\"){\n//     //         this.props.onClick();\n//     //     }\n//     // }\n//     changeForBatmans = () =>{\n//         //need to change img during click \n//         console.log(this.state.image)\n//         if ( this.state.image ===\"./imagies/joker-white.jpg\"){\n//             this.setState({\n//                 image: \"./imagies/batman-black.jpg\"\n//                 // counter: this.state.counter +1\n                \n                \n\n//             })\n//             // console.log(this.state.counter)\n//         }else {\n//             // this.setState({\n//             //     image: \"./imagies/joker-white.jpg\"\n               \n//             // })\n//             console.log( \"to pole juz bylo klikniete\")\n//         }\n//     }\n//     // }\n//     // componentDidMount(){\n//     //     this.timeoutId = setTimeout(()=>{\n//     //     this.setState({\n//     //         alert:\"start click\"\n//     //     })\n//     //         },5000)\n       \n//     // }\n//     // componentWillUnmount(){\n//     //     clearTimeout(this.timeout);\n//     //     this.setState({\n//     //         alert: `your score is ${this.state.counter} `\n//     //     })\n//     // }\n\n\n   \n//     render() {\n\n\n\n\n//         let final =  <img\n//         src={require(`${this.state.image}`)}\n\n//         onClick = {() => this.changeForBatmans}\n//         className=\"cell\"\n//         alt=\"x\" />\n  \n//         return (\n         \n//             <td>{final}</td>\n            \n   \n//         );\n//     }\n// }\n\n\n\n// export default Game;\n\n\nimport React from 'react';\nimport './gameBoard.css'\n\n\nclass Game extends React.Component {\n    constructor (props){\n        super(props);\n        this.state={\n            counter : 0 \n\n        }\n    }\n \n   \n\n\n    \n    boardGame = (urows, ucolumns) => {\n        // Build the rows in an array\n        let rows = [];\n        for (let y = 0; y < urows; y++) {\n            const cells = [];\n            for (let x = 0; x < ucolumns; x++) {\n                cells.push(<Cell key={x} />);\n            }\n            console.log(cells)\n            // Put them in the row\n            rows.push(<tr key={y}>{cells}</tr>);\n            \n        } \n        myMap ({rows});\n        \n\n\n        // Return the table\n        return (\n          <table>\n            <tbody>\n              {rows}\n            </tbody>\n          </table>\n        );\n    }\n\n\n    myMap = (boardGame)=>{\n        boardGame.map( board =>{\n            console.log(board)\n        })\n\n    }\n    // randomBatmans = (urows1,ucolumns1) =>{\n    //     // count all img \n    //     let calcBoard = urows1 * ucolumns1\n    //     let randomNr = Math.round(Math.random() * (calcBoard - 1) + 1);\n    //     console.log(randomNr)\n    //     let arrForIndex = []\n    //     for (let i =0; i<randomNr; i++){\n    //         let finalIndex = Math.round(Math.random() * (calcBoard - 1) + 1);\n    //         console.log(finalIndex)\n    //      arrForIndex.push(finalIndex);\n     \n    //     }\n    //     console.log(arrForIndex)\n        \n \n\n\n            \n    // }\n\n    check = (ar)=>{\n        \n    }\n  \n\n\n\n\n\n    render() {\n        let userRows = prompt(\"Provide number of rows\");\n        let userColumns = prompt(\"Provide number of columns\");\n      \n\n        return (\n            <div>\n                <div>{this.boardGame(userRows,userColumns)}</div>\n            {/* start generate random index during click on button  */}\n                {/* <button onClick={() => this.randomBatmans(userRows,userColumns)}>play</button> */}\n                <button onClick ={() => this.check()}>Check next population</button>\n\n\n               \n       \n            </div>\n        );\n    }\n}\n\n\n\nclass Cell extends React.Component {\n    constructor(props){\n        super(props)\n            this.state={\n                image:\"./imagies/joker-white.jpg\",\n                counter: 0\n\n    \n        }\n    }\n    changeForBatman = () =>{\n        if ( this.state.image ===\"./imagies/joker-white.jpg\"){\n            this.setState({\n                image: \"./imagies/batman-black.jpg\",\n                counter: this.state.counter +1\n            })\n           \n        }else {\n            console.log(\"Karta juz zostala odwrocona \")\n        }\n    }\n\n   \n    render() {\n        let final =  <img\n        src={require(`${this.state.image}`)}\n        onClick = {() => this.changeForBatman()}\n        className=\"cell\"\n        alt=\"x\" />\n\n        let newCounter =this.state.counter\n        console.log(newCounter)\n  \n        return (\n            <div>\n            <td>{final}</td>\n           \n            </div>\n        );\n    }\n}\n\n         \n\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}